{"version":3,"file":"smartbear-browser-info.embed.js","sources":["../src/entity.js","../src/platforms.js","../src/browsers.js","../src/index.js","../src/embed.js"],"sourcesContent":["class Entity {\n  constructor(name, pattern) {\n    this.name = name;\n    this.pattern = pattern;\n  }\n\n  match(str) {\n    const majorVersion = /^\\d+/;\n\n    const m = str.match(this.pattern);\n    if (m === null) {\n      return null;\n    }\n\n    const info = {\n      name: this.name,\n      version: null,\n      release: null\n    };\n\n    if (typeof m[1] !== 'undefined') {\n      info.version = m[1].replace('_', '.');\n      info.release = parseInt(info.version.match(majorVersion)[0], 10);\n    }\n    return info;\n  }\n}\n\nexport default Entity;\n","import Entity from \"./entity.js\";\n\nconst windows = new Entity('Windows', /Windows NT ([0-9.]+)/);\nconst windowsPhone = new Entity('Windows Phone', /Windows Phone ([0-9.]+)/);\nconst macOs = new Entity('MacOS', /OS X ([0-9._]+)/);\nconst iOS = new Entity('iOS', /iPhone OS ([0-9_.]+)/);\nconst iPadOS = new Entity('iPadOS', /iPad.+?OS ([0-9_,]+)/);\nconst chromeOS = new Entity('ChromeOS', /CrOS [^ ]+ ([0-9.]+)/);\nconst android = new Entity('Android', /(?:Android|Adr) ([0-9.]+)/);\nconst blackBerry = new Entity('BlackBerry', /BlackBerry|BB10/);\nconst webOS = new Entity('webOS', /webOS\\/([0-9.]+)/);\nconst linux = new Entity('Linux', /Linux/);\n\nconst platforms = [ windows, windowsPhone, macOs, iOS, iPadOS, chromeOS, android, blackBerry, webOS, linux];\n\nexport {windows, windowsPhone, macOs, iOS, iPadOS, chromeOS, android, blackBerry,webOS, linux, platforms};\n","import Entity from \"./entity.js\";\n\nconst firefox = new Entity('Firefox', /Firefox\\/([0-9.]+)/);\nconst edge = new Entity('Edge', /Edg[AeiOS]{0,3}\\/([0-9.]+)/);\nconst opera = new Entity('Opera', /OPR\\/([0-9.]+)/);\nconst samsungInternet = new Entity('SamsungInternet', /SamsungBrowser\\/([0-9.]+)/);\nconst ucBrowser = new Entity('UCBrowser', /UCBrowser\\/([0-9.]+)/);\nconst chrome = new Entity('Chrome', /Chrome\\/([0-9.]+)/);\nconst safari = new Entity('Safari', /Version\\/([0-9.]+)(?: .*)? Safari\\//);\nconst internetExplorer = new Entity('InternetExplorer', /(?:MSIE |IEMobile\\/|Trident\\/.*rv:)([0-9.]+)/);\n\nconst browsers = [ firefox, edge, opera, samsungInternet, ucBrowser,samsungInternet, ucBrowser, chrome, safari, internetExplorer];\n\nexport {firefox, edge, opera, samsungInternet, ucBrowser, chrome, safari, internetExplorer, browsers};\n","import { platforms, macOs} from \"./platforms.js\";\nimport {browsers} from \"./browsers.js\";\n\n\nlet BrowserInfo = {\n    os: '?',\n    name: '?',\n    release: '?',\n    version: '?',\n\n    detect: function(userAgent) {\n        let ua = typeof userAgent === 'string' ? userAgent : window.navigator.userAgent,\n            found = false,\n            match,\n            i;\n\n        for (i = 0; i < browsers.length; i++) {\n            match = browsers[i].match(ua);\n\n            if (match !== null) {\n                this.name = match.name;\n                this.release = match.release;\n                this.version = match.version;\n                found = true;\n                break;\n            }\n        }\n\n        for (i = 0; i < platforms.length; i++) {\n            match = platforms[i].match(ua);\n\n            if (match !== null) {\n                this.os = match.name;\n                break;\n            }\n        }\n\n        return found;\n    },\n\n    toString: function() {\n        return this.name + ' ' + this.version;\n    },\n\n    isMac: function() {\n      return this.os === macOs.name;\n    },\n\n    get versionAsNumber() {\n      return parseInt(this.version.replace(/\\./g, ''));\n    }\n};\n\nexport default BrowserInfo;\n","import BrowserInfo from './index';\n\nwindow.navigator.browserInfo = BrowserInfo;\nBrowserInfo.detect();\n\nexport default BrowserInfo;\n"],"names":["Entity","constructor","name","pattern","this","match","str","majorVersion","m","info","version","release","replace","parseInt","windows","windowsPhone","macOs","iOS","iPadOS","chromeOS","android","blackBerry","webOS","linux","platforms","firefox","edge","opera","samsungInternet","ucBrowser","browsers","BrowserInfo","os","detect","userAgent","i","ua","window","navigator","found","length","toString","isMac","versionAsNumber","browserInfo"],"mappings":";2PAAA,MAAMA,EACJ,WAAAC,CAAYC,EAAMC,GAChBC,KAAKF,KAAOA,EACZE,KAAKD,QAAUA,CAChB,CAED,KAAAE,CAAMC,GACJ,MAAMC,EAAe,OAEfC,EAAIF,EAAID,MAAMD,KAAKD,SACzB,GAAU,OAANK,EACF,OAAO,KAGT,MAAMC,EAAO,CACXP,KAAME,KAAKF,KACXQ,QAAS,KACTC,QAAS,MAOX,YAJoB,IAATH,EAAE,KACXC,EAAKC,QAAUF,EAAE,GAAGI,QAAQ,IAAK,KACjCH,EAAKE,QAAUE,SAASJ,EAAKC,QAAQL,MAAME,GAAc,GAAI,KAExDE,CACR,ECvBH,MAAMK,EAAU,IAAId,EAAO,UAAW,wBAChCe,EAAe,IAAIf,EAAO,gBAAiB,2BAC3CgB,EAAQ,IAAIhB,EAAO,QAAS,mBAC5BiB,EAAM,IAAIjB,EAAO,MAAO,wBACxBkB,EAAS,IAAIlB,EAAO,SAAU,wBAC9BmB,EAAW,IAAInB,EAAO,WAAY,wBAClCoB,EAAU,IAAIpB,EAAO,UAAW,6BAChCqB,EAAa,IAAIrB,EAAO,aAAc,mBACtCsB,EAAQ,IAAItB,EAAO,QAAS,oBAC5BuB,EAAQ,IAAIvB,EAAO,QAAS,SAE5BwB,EAAY,CAAEV,EAASC,EAAcC,EAAOC,EAAKC,EAAQC,EAAUC,EAASC,EAAYC,EAAOC,GCX/FE,EAAU,IAAIzB,EAAO,UAAW,sBAChC0B,EAAO,IAAI1B,EAAO,OAAQ,8BAC1B2B,EAAQ,IAAI3B,EAAO,QAAS,kBAC5B4B,EAAkB,IAAI5B,EAAO,kBAAmB,6BAChD6B,EAAY,IAAI7B,EAAO,YAAa,wBAKpC8B,EAAW,CAAEL,EAASC,EAAMC,EAAOC,EAAiBC,EAAUD,EAAiBC,EAJtE,IAAI7B,EAAO,SAAU,qBACrB,IAAIA,EAAO,SAAU,uCACX,IAAIA,EAAO,mBAAoB,iDCLrD,IAAC+B,EAAc,CACdC,GAAI,IACJ9B,KAAM,IACNS,QAAS,IACTD,QAAS,IAETuB,OAAQ,SAASC,GACb,IAEI7B,EACA8B,EAHAC,EAA0B,iBAAdF,EAAyBA,EAAYG,OAAOC,UAAUJ,UAClEK,GAAQ,EAIZ,IAAKJ,EAAI,EAAGA,EAAIL,EAASU,OAAQL,IAG7B,GAFA9B,EAAQyB,EAASK,GAAG9B,MAAM+B,GAEZ,OAAV/B,EAAgB,CAChBD,KAAKF,KAAOG,EAAMH,KAClBE,KAAKO,QAAUN,EAAMM,QACrBP,KAAKM,QAAUL,EAAMK,QACrB6B,GAAQ,EACR,KACH,CAGL,IAAKJ,EAAI,EAAGA,EAAIX,EAAUgB,OAAQL,IAG9B,GAFA9B,EAAQmB,EAAUW,GAAG9B,MAAM+B,GAEb,OAAV/B,EAAgB,CAChBD,KAAK4B,GAAK3B,EAAMH,KAChB,KACH,CAGL,OAAOqC,CACV,EAEDE,SAAU,WACN,OAAOrC,KAAKF,KAAO,IAAME,KAAKM,OACjC,EAEDgC,MAAO,WACL,OAAOtC,KAAK4B,KAAOhB,EAAMd,IAC1B,EAED,mBAAIyC,GACF,OAAO9B,SAAST,KAAKM,QAAQE,QAAQ,MAAO,IAC7C,UChDLyB,OAAOC,UAAUM,YAAcb,EAC/BA,EAAYE"}